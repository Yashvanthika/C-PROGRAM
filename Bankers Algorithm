#include <stdio.h>
void bankersAlgorithm(int p[], int avail[], int max[][3], int alloc[][3], int n, int m) 
{
    int need[n][m], finish[n] = {0}, safeSeq[n], work[m];
    for (int i = 0; i < m; i++) 
	work[i] = avail[i]; 
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < m; j++) 
		need[i][j] = max[i][j] - alloc[i][j];
	}
    int count = 0;
    while (count < n) 
	{
        int found = 0;
        for (int i = 0; i < n; i++) 
		{
            if (!finish[i]) 
			{
                int j;
                for (j = 0; j < m && need[i][j] <= work[j]; j++);
                if (j == m) 
				{
                    for (int k = 0; k < m; k++) work[k] += alloc[i][k];
                    safeSeq[count++] = p[i];
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) 
		return (void)printf("Unsafe state.\n");
    }
    printf("Safe state. Sequence: ");
    for (int i = 0; i < n; i++) 
	printf("%d ", safeSeq[i]);
    printf("\n");
}
int main() 
{
    int p[] = {0, 1, 2, 3, 4}, avail[] = {3, 3, 2};
    int max[][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int alloc[][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    bankersAlgorithm(p, avail, max, alloc, 5, 3);
    return 0;
}
