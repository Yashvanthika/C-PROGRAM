#include <stdio.h>

struct Process {
    int at, bt, wt, tat, completed;
};

void sort_by_at_bt(struct Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].at > p[j + 1].at || 
                (p[j].at == p[j + 1].at && p[j].bt > p[j + 1].bt)) {
                struct Process t = p[j];
                p[j] = p[j + 1];
                p[j + 1] = t;
            }
        }
    }
}

int main() {
    int n, time = 0, completed = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process p[n];

    for (int i = 0; i < n; i++) {
        printf("Process %d - AT, BT: ", i + 1);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].completed = 0; // Initialize completed flag
    }

    // Process scheduling loop
    while (completed < n) {
        int idx = -1, min_bt = 9999;

        // Find the process with the earliest arrival time and shortest burst time
        for (int i = 0; i < n; i++) {
            if (p[i].completed == 0 && p[i].at <= time && p[i].bt < min_bt) {
                min_bt = p[i].bt;
                idx = i;
            }
        }

        if (idx != -1) {
            p[idx].wt = time - p[idx].at; // Waiting time
            time += p[idx].bt;           // Update current time
            p[idx].tat = time - p[idx].at; // Turnaround time
            p[idx].completed = 1;        // Mark process as completed
            completed++;
        } else {
            // If no process is ready, increment time
            time++;
        }
    }

    // Display results
    printf("\nAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", p[i].at, p[i].bt, p[i].wt, p[i].tat);
    }

    return 0;
}
